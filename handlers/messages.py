# handlers/messages.py
import logging
from telegram import Update
from telegram.ext import MessageHandler, filters, CallbackContext
from utils.download import download_music
import os
import asyncio

async def buttons_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    logging.info(f"üì© –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞: {text}")

    if text == "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ—Å–Ω—é":
        await update.message.reply_text("üéµ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:")
        context.user_data["awaiting_song"] = True
    elif text == "üîç –ü–æ—à—É–∫ –º—É–∑–∏–∫–∏":
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∞–±–æ –ø—ñ—Å–Ω—é –¥–ª—è –ø–æ—à—É–∫—É:")
    elif text == "üé∂ –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø—ñ—Å–Ω—é":
        await update.message.reply_text("üé§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ—Å–Ω–µ—é.")
    elif text == "üìÉ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ":
        await update.message.reply_text("üìú –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É:")
    elif text == "üéß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
        await update.message.reply_text("‚ú® –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —É–ª—é–±–ª–µ–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è ‚Äì —è –ø—ñ–¥–±–µ—Ä—É —â–æ—Å—å —Å—Ö–æ–∂–µ.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.")

async def text_message_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    logging.info(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç: {text}")
    if context.user_data.get("awaiting_song", False):
        context.user_data["awaiting_song"] = False
        logging.info(f"üéµ –ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ: {text}")
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—É–∑–∏–∫–∏
        await send_music_wrapper(update, context, text)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.")

async def send_music_wrapper(update: Update, context: CallbackContext, query: str) -> None:
    logging.info(f"üîç –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–Ω—ñ: {query}")
    await update.message.reply_text(f"üîç –®—É–∫–∞—é {query}...")
    file_path = download_music(query)
    if file_path and os.path.exists(file_path):
        try:
            with open(file_path, 'rb') as audio:
                await update.message.reply_audio(audio=audio)
            logging.info(f"‚úÖ –ü—ñ—Å–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {file_path}")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–Ω—ñ.")
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ—Å–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

buttons_handler = MessageHandler(filters.TEXT & filters.Regex("^(üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ—Å–Ω—é|üîç –ü–æ—à—É–∫ –º—É–∑–∏–∫–∏|üé∂ –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø—ñ—Å–Ω—é|üìÉ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ|üéß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó)$"), buttons_handler)
text_message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler)
