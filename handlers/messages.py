# handlers/messages.py

import logging
import os
from telegram import Update, InputFile
from telegram.ext import CallbackContext
from utils.download import (
    download_music_with_metadata,
    download_thumbnail,
    download_music,
    fetch_youtube_metadata,
    recognize_song
)
from utils.sanitize import format_duration, format_filesize

def format_duration_local(sec):
    m, s = divmod(sec, 60)
    return f"{m}:{s:02d}"

async def buttons_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    logging.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {text}")

    if text == "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ—Å–Ω—é":
        await update.message.reply_text("üéµ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:")
        context.user_data["awaiting_song"] = True
        logging.info("‚è≥ –û—á—ñ–∫—É—î—Ç—å—Å—è –Ω–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    elif text == "üîç –ü–æ—à—É–∫ –º—É–∑–∏–∫–∏":
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∞–±–æ –ø—ñ—Å–Ω—é –¥–ª—è –ø–æ—à—É–∫—É:")
    elif text == "üé∂ –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø—ñ—Å–Ω—é":
        await update.message.reply_text("üé§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ—Å–Ω–µ—é.")
    elif text == "üìÉ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ":
        await update.message.reply_text("üìú –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É:")
    elif text == "üéß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
        await update.message.reply_text("‚ú® –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —É–ª—é–±–ª–µ–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è ‚Äì —è –ø—ñ–¥–±–µ—Ä—É —â–æ—Å—å —Å—Ö–æ–∂–µ.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.")

async def text_message_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    logging.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç: {text}")

    if context.user_data.get("awaiting_song", False):
        context.user_data["awaiting_song"] = False
        logging.info(f"üéµ –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {text}")
        await send_music_with_thumb(update, context, text)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.")

async def send_music_with_thumb(update: Update, context: CallbackContext, query: str) -> None:
    logging.info(f"üîç –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–Ω—ñ: {query}")
    await update.message.reply_text(f"‚¨áÔ∏è –®—É–∫–∞—é —ñ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é: {query}...")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —ñ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    filename, title, duration, uploader, thumb_url = download_music_with_metadata(query)
    if not filename or not os.path.exists(filename):
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ—Å–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # duration_str = format_duration(duration) if duration else "N/A"
    # info_msg = f"–ù–∞–¥—Å–∏–ª–∞—é:\n{title}\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_str}\n–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {uploader}"
    # await update.message.reply_text(info_msg)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ –∑–º–µ–Ω—à—É—î–º–æ thumbnail
    thumb_path = download_thumbnail(thumb_url, 'thumb.jpg', 200)

    try:
        with open(filename, 'rb') as audio_file:
            audio_input = InputFile(audio_file, filename=os.path.basename(filename))
            if thumb_path and os.path.exists(thumb_path):
                with open(thumb_path, 'rb') as thumb_file:
                    thumb_input = InputFile(thumb_file, filename=os.path.basename(thumb_path))
                    # –ü–µ—Ä–µ–¥–∞—î–º–æ thumb —á–µ—Ä–µ–∑ api_kwargs
                    await update.message.reply_audio(
                        audio=audio_input,
                        title=title,
                        performer=uploader,
                        duration=duration if duration else 0,
                        caption="@music_for_weyymss_bot",
                        api_kwargs={"thumb": thumb_input}
                    )
            else:
                await update.message.reply_audio(
                    audio=audio_input,
                    title=title,
                    performer=uploader,
                    caption="@music_for_weyymss_bot",
                    duration=duration if duration else 0
                )
        logging.info(f"‚úÖ –ü—ñ—Å–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {filename}")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø—ñ—Å–Ω—ñ.")# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤ bot.py
