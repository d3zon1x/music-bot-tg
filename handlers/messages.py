# handlers/messages.py
import asyncio
import logging
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ParseMode
from telegram.ext import CallbackContext, CallbackQueryHandler


from sqlDb.db import insert_search
from utils.download import (
    download_thumbnail,
    search_music,
    get_lyrics, normalize_youtube_url
)
from utils.recommendations import get_recommendations
from utils.sanitize import format_duration


async def insert_song_bd(u_id, user, artist: str, text: str):
    await insert_search(u_id, user, artist, text)

def format_duration_local(sec):
    m, s = divmod(sec, 60)
    return f"{m}:{s:02d}"

async def buttons_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    logging.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {text}")

    global user_id, username
    user_id = str(update.message.from_user.id)
    # result = await get_recommendations(user_id)
    # print(result)
    username = update.message.from_user.username or update.message.from_user.first_name


    if text == "üîç –ü–æ—à—É–∫ –≤—ñ–¥–µ–æ –∫–ª—ñ–ø—É":
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∞–±–æ –ø—ñ—Å–Ω—é –¥–ª—è –ø–æ—à—É–∫—É:")
        context.user_data["mode"] = "search"  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É
        logging.info("‚è≥ –†–µ–∂–∏–º –ø–æ—à—É–∫—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
    elif text == "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ—Å–Ω—é":
        await update.message.reply_text("üéµ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:")
        context.user_data["mode"] = "download"  # –†–µ–∂–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        logging.info("‚è≥ –†–µ–∂–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
    elif text == "üé∂ –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø—ñ—Å–Ω—é":
        await update.message.reply_text("üé§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ—Å–Ω–µ—é.")
    elif text == "üìÉ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ":
        await update.message.reply_text("üìú –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É:")
        context.user_data["mode"] = "lyrics"  # –†–µ–∂–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        logging.info("‚è≥ –†–µ–∂–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
    elif text == "üéß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
        await send_recommendations_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.")

async def text_message_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    logging.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç: {text}")

    mode = context.user_data.get("mode")
    if mode == "download":
        # –†–µ–∂–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–Ω—ñ
        context.user_data["mode"] = "download"
        logging.info(f"üéµ –ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {text}")
        await send_music_with_thumb(update, context, text)  # –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –æ–±–∫–ª–∞–¥–∏–Ω–∫–æ—é
    elif mode == "search":
        # –†–µ–∂–∏–º –ø–æ—à—É–∫—É –º—É–∑–∏–∫–∏
        context.user_data["mode"] = None
        logging.info(f"üéµ –ó–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É –º—É–∑–∏–∫–∏: {text}")
        await send_search_results(update, context, text)
    elif mode == "lyrics":
        # –†–µ–∂–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—ñ—Å–Ω—ñ
        context.user_data["mode"] = None
        logging.info(f"üìú –ó–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É: {text}")
        await send_lyrics(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.")


async def download_callback(update: Update, context: CallbackContext) -> None:
    query_obj = update.callback_query
    await query_obj.answer()  # –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback
    await query_obj.edit_message_reply_markup(reply_markup=None)

    data = query_obj.data  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "download_https://www.youtube.com/watch?v=XYZ"
    prefix = "download_"
    if not data.startswith(prefix):
        await query_obj.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return

    video_url = data[len(prefix):]
    if not video_url.startswith("http"):
        await query_obj.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL.")
        return

    logging.info(f"üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É –∑ URL: {video_url}")
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –æ–±–∫–ª–∞–¥–∏–Ω–∫–æ—é, –ø–µ—Ä–µ–¥–∞—é—á–∏ URL –∑–∞–º—ñ—Å—Ç—å –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É.
    # –ü—Ä–∏ —Ü—å–æ–º—É —Ñ—É–Ω–∫—Ü—ñ—è send_music_with_thumb –º–∞—î –±—É—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—Ä—è–º–æ–≥–æ URL (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

    await send_music_with_thumb(update, context, video_url)
# –†–µ—î—Å—Ç—Ä—É—î–º–æ callback handler

async def send_search_results(update: Update, context: CallbackContext, query: str) -> None:
    logging.info(f"üîç –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ—à—É–∫ –º—É–∑–∏–∫–∏: {query}")
    await update.message.reply_text(f"üîç –®—É–∫–∞—é –º—É–∑–∏–∫—É –∑–∞ –∑–∞–ø–∏—Ç–æ–º: {query}...")
    results = await search_music(query)
    if not results:
        await update.message.reply_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    context.user_data['search_results'] = results
    keyboard = []
    for i, res in enumerate(results, start=1):
        duration_str = format_duration(res['duration']) if res['duration'] else "N/A"
        msg = f"*{res['title']}*\nüë§: {res['uploader']}\nüïë: {duration_str}\n[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏]({res['url']})\n\n"
        keyboard.append([InlineKeyboardButton(text="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data=f"download_{res['url']}")])
    inline_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_markup)

async def send_lyrics(update: Update, context: CallbackContext) -> None:
    query = update.message.text
    logging.info(f"üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø—ñ—Å–Ω—ñ: {query}")
    await update.message.reply_text("üîç –û—Ç—Ä–∏–º—É—é —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
    lyrics = await get_lyrics(query)
    if not lyrics:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ.")
        return
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ (Telegram –æ–±–º–µ–∂—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ ~4096 —Å–∏–º–≤–æ–ª—ñ–≤)
    max_length = 4000
    parts = [lyrics[i:i+max_length] for i in range(0, len(lyrics), max_length)]
    for part in parts:
        await update.message.reply_text(part)

async def send_recommendations_menu(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("5 —Ç—Ä–µ–∫—ñ–≤", callback_data="reco_5")],
        [InlineKeyboardButton("10 —Ç—Ä–µ–∫—ñ–≤", callback_data="reco_10")],
        [InlineKeyboardButton("15 —Ç—Ä–µ–∫—ñ–≤", callback_data="reco_15")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:", reply_markup=reply_markup)
    context.user_data["mode"] = "recommendations"

# Callback handler –¥–ª—è –º–µ–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
async def recommendations_callback(update: Update, context: CallbackContext) -> None:
    query_obj = update.callback_query
    await query_obj.answer()
    await query_obj.edit_message_reply_markup(reply_markup=None)
    data = query_obj.data  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "reco_5"
    try:
        limit = int(data.split("_")[1])
    except (IndexError, ValueError):
        await query_obj.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return
    user_id = str(update.callback_query.from_user.id)
    recommendations = await get_recommendations(user_id, limit)
    if not recommendations:
        await query_obj.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.")
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è callback'—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    context.user_data['recommendations'] = recommendations
    for idx, rec in enumerate(recommendations):
        duration_str = format_duration(rec['duration']) if rec.get('duration') else "N/A"
        results = await search_music(rec['artist'] + " " + rec['title'])
        for i, res in enumerate(results, start=1):
            duration_str = format_duration(res['duration']) if res['duration'] else "N/A"
            msg = f"*{res['title']}*\nüë§: {res['uploader']}\nüïë: {duration_str}\n[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏]({res['url']})\n\n"
            # keyboard.append([InlineKeyboardButton(text="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data=f"download_{i - 1}")])
            keyboard = [
                [InlineKeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data=f"download_{res['url']}")]
            ]
            inline_markup = InlineKeyboardMarkup(keyboard)
            await query_obj.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_markup)

        # print(result)
        # msg_text = (
        #     f"*{result['title']}*\n"
        #     f"–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {result['uploader']}\n"
        #     f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {result['duration']}\n"
        #     f"[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ YouTube]({result['url']})"
        # )

def progress_hook_factory(bot, chat_id, message_id, loop):
    def progress_hook(d):
        if d.get('status') == 'downloading':
            total = d.get('total_bytes') or d.get('total_bytes_estimate')
            if total:
                downloaded = d.get('downloaded_bytes', 0)
                percent = downloaded / total * 100
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ run_coroutine_threadsafe –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫–æ—Ä—É—Ç–∏–Ω–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É event loop
                future = asyncio.run_coroutine_threadsafe(
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=f"‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {percent:.1f}%"
                    ),
                    loop
                )
                # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
                try:
                    future.result()
                except Exception as e:
                    if "Message is not modified" in str(e):
                        pass
                    else:
                        logging.error(f"Error updating progress: {e}")
    return progress_hook

async def send_music_with_thumb(update: Update, context: CallbackContext, query: str) -> None:
    msg_obj = update.message if update.message is not None else update.callback_query.message
    progress_message = await msg_obj.reply_text(f"‚¨áÔ∏è –ü–æ—à—É–∫: {query}", disable_web_page_preview=True)
    chat_id = progress_message.chat_id
    message_id = progress_message.message_id

    # –û—Ç—Ä–∏–º—É—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π event loop
    main_loop = asyncio.get_running_loop()

    def download():
        from yt_dlp import YoutubeDL
        with YoutubeDL(ydl_opts) as ydl:
            if query.startswith("http"):
                normalized_query = normalize_youtube_url(query)
                info = ydl.extract_info(f"ytsearch:{normalized_query}", download=True)
            else:
                info = ydl.extract_info(f"ytsearch:{query}", download=True)

            if 'entries' in info:
                if not info['entries']:
                    # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äì –∫–∏–¥–∞—î–º–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
                    raise ValueError("No entries found for the query")
                info = info['entries'][0]
            filename = ydl.prepare_filename(info)
            filename = filename.replace('.webm', '.mp3').replace('.m4a', '.mp3')
            return info, filename

    bot = context.bot
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'music/%(title)s.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'progress_hooks': [progress_hook_factory(bot, chat_id, message_id, main_loop)],
    }

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    try:
        info, filename = await asyncio.to_thread(download)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        await msg_obj.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ—Å–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.")
        return

    if not filename or not os.path.exists(filename):
        await msg_obj.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ—Å–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    thumb_url = info.get('thumbnail')
    thumb_path = await download_thumbnail(thumb_url, 'thumb.jpg', 200)

    try:
        with open(filename, 'rb') as audio_file:
            audio_input = InputFile(audio_file, filename=os.path.basename(filename))
            if thumb_path and os.path.exists(thumb_path):
                with open(thumb_path, 'rb') as thumb_file:
                    thumb_input = InputFile(thumb_file, filename=os.path.basename(thumb_path))
                    await msg_obj.reply_audio(
                        audio=audio_input,
                        title=info.get('title', 'Unknown'),
                        performer=info.get('uploader', 'Unknown'),
                        duration=info.get('duration', 0),
                        caption="@music_for_weyymss_bot",
                        api_kwargs={"thumb": thumb_input}
                    )
            else:
                await msg_obj.reply_audio(
                    audio=audio_input,
                    title=info.get('title', 'Unknown'),
                    performer=info.get('uploader', 'Unknown'),
                    duration=info.get('duration', 0)
                )
        logging.info(f"‚úÖ –ü—ñ—Å–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {filename}")
        await insert_song_bd(user_id, username, info.get('uploader', 'Unknown'), info.get('title', 'Unknown'))
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"{info.get('title', 'Unknown')} ‚úÖ\n"
        )
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É: {e}")
        await msg_obj.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø—ñ—Å–Ω—ñ.")


download_callback_handler = CallbackQueryHandler(download_callback, pattern="^download_")
