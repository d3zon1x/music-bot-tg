# handlers/messages.py

import logging
import os
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import CallbackContext, MessageHandler, filters, CallbackQueryHandler
from utils.download import (
    download_music_with_metadata,
    download_thumbnail,
    download_music,
    fetch_youtube_metadata,
    recognize_song, search_music, get_lyrics
)
from utils.sanitize import format_duration, format_filesize

def format_duration_local(sec):
    m, s = divmod(sec, 60)
    return f"{m}:{s:02d}"

async def buttons_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    logging.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {text}")


    if text == "üîç –ü–æ—à—É–∫ –≤—ñ–¥–µ–æ –∫–ª—ñ–ø—É":
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∞–±–æ –ø—ñ—Å–Ω—é –¥–ª—è –ø–æ—à—É–∫—É:")
        context.user_data["mode"] = "search"  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É
        logging.info("‚è≥ –†–µ–∂–∏–º –ø–æ—à—É–∫—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
    elif text == "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ—Å–Ω—é":
        await update.message.reply_text("üéµ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:")
        context.user_data["mode"] = "download"  # –†–µ–∂–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        logging.info("‚è≥ –†–µ–∂–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
    elif text == "üé∂ –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø—ñ—Å–Ω—é":
        await update.message.reply_text("üé§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ—Å–Ω–µ—é.")
    elif text == "üìÉ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ":
        await update.message.reply_text("üìú –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É:")
        context.user_data["mode"] = "lyrics"  # –†–µ–∂–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        logging.info("‚è≥ –†–µ–∂–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
    elif text == "üéß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
        await update.message.reply_text("‚ú® –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —É–ª—é–±–ª–µ–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è ‚Äì —è –ø—ñ–¥–±–µ—Ä—É —â–æ—Å—å —Å—Ö–æ–∂–µ.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.")

async def text_message_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    logging.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç: {text}")

    mode = context.user_data.get("mode")
    if mode == "download":
        # –†–µ–∂–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–Ω—ñ
        context.user_data["mode"] = "download"
        logging.info(f"üéµ –ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {text}")
        await send_music_with_thumb(update, context, text)  # –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –æ–±–∫–ª–∞–¥–∏–Ω–∫–æ—é
    elif mode == "search":
        # –†–µ–∂–∏–º –ø–æ—à—É–∫—É –º—É–∑–∏–∫–∏
        context.user_data["mode"] = None
        logging.info(f"üéµ –ó–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É –º—É–∑–∏–∫–∏: {text}")
        await send_search_results(update, context, text)
    elif mode == "lyrics":
        # –†–µ–∂–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—ñ—Å–Ω—ñ
        context.user_data["mode"] = None
        logging.info(f"üìú –ó–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É: {text}")
        await send_lyrics(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.")

async def download_callback(update: Update, context: CallbackContext) -> None:
    query_obj = update.callback_query
    await query_obj.answer()  # –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback

    await query_obj.edit_message_reply_markup(reply_markup=None)

    data = query_obj.data  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "download_0"
    try:
        index = int(data.split("_")[1])
    except (IndexError, ValueError):
        await query_obj.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return

    results = context.user_data.get('search_results', [])
    if index < 0 or index >= len(results):
        await query_obj.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return

    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ title –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —è–∫ –∑–∞–ø–∏—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
    track_query = results[index]['title']
    # await query_obj.edit_message_text(f"üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É: {track_query}...")
    logging.info(f"üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É: {track_query}")
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –æ–±–∫–ª–∞–¥–∏–Ω–∫–æ—é (—è–∫–∞ –º–∞—î –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, send_music_with_thumb)
    from handlers.messages import send_music_with_thumb  # —ñ–º–ø–æ—Ä—Ç—É—î–º–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    await send_music_with_thumb(update, context, track_query)

# –†–µ—î—Å—Ç—Ä—É—î–º–æ callback handler
download_callback_handler = CallbackQueryHandler(download_callback, pattern="^download_")

async def send_search_results(update: Update, context: CallbackContext, query: str) -> None:
    logging.info(f"üîç –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ—à—É–∫ –º—É–∑–∏–∫–∏: {query}")
    await update.message.reply_text(f"üîç –®—É–∫–∞—é –º—É–∑–∏–∫—É –∑–∞ –∑–∞–ø–∏—Ç–æ–º: {query}...")

    results = search_music(query)  # –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
    # [{'title': 'Song Title', 'duration': 210, 'uploader': 'Artist Name', 'url': 'https://...'}, ...]
    if not results:
        await update.message.reply_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ user_data –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ callbackQuery
    context.user_data['search_results'] = results

    msg = "–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:\n\n"
    keyboard = []
    for i, res in enumerate(results, start=1):
        duration_str = format_duration(res['duration']) if res['duration'] else "N/A"
        msg = f"* {res['title']}*\n–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {res['uploader']}\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_str}\n[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏]({res['url']})\n\n"
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—å–æ–≥–æ —Ç—Ä–µ–∫—É
        # callback_data "download_<index>" (—ñ–Ω–¥–µ–∫—Å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0)
        keyboard.append([InlineKeyboardButton(text="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data=f"download_{i - 1}")])

    inline_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_markup)


async def send_lyrics(update: Update, context: CallbackContext) -> None:
    query = update.message.text
    logging.info(f"üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø—ñ—Å–Ω—ñ: {query}")
    await update.message.reply_text("üîç –û—Ç—Ä–∏–º—É—é —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
    lyrics = get_lyrics(query)
    if not lyrics:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ.")
        return
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ (Telegram –æ–±–º–µ–∂—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ ~4096 —Å–∏–º–≤–æ–ª—ñ–≤)
    max_length = 4000
    parts = [lyrics[i:i+max_length] for i in range(0, len(lyrics), max_length)]
    for part in parts:
        await update.message.reply_text(part)


# –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä:
search_music_handler = MessageHandler(
    filters.TEXT & filters.Regex("^üîç –ü–æ—à—É–∫ –º—É–∑–∏–∫–∏$"),
    send_search_results  # –ê–±–æ –æ–∫—Ä–µ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–∏—Ç—å –∑–∞–ø–∏—Ç, –∞ –ø–æ—Ç—ñ–º –≤–∏–∫–ª–∏–∫–∞—î send_search_results
)


async def send_music_with_thumb(update: Update, context: CallbackContext, query: str) -> None:
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: —è–∫—â–æ —Ü–µ callback query, –±–µ—Ä–µ–º–æ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    msg_obj = update.message if update.message is not None else update.callback_query.message
    await msg_obj.reply_text(f"‚¨áÔ∏è –®—É–∫–∞—é —ñ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é: {query}...")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞—É–¥—ñ–æ —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω—ñ
    filename, title, duration, uploader, thumb_url = download_music_with_metadata(query)
    if not filename or not os.path.exists(filename):
        await msg_obj.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ—Å–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # duration_str = format_duration(duration) if duration else "N/A"
    # info_msg = f"–ù–∞–¥—Å–∏–ª–∞—é:\n{title}\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_str}\n–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {uploader}"
    # await msg_obj.reply_text(info_msg)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –∑–º–µ–Ω—à—É—î–º–æ thumbnail
    thumb_path = download_thumbnail(thumb_url, 'thumb.jpg', 200)

    try:
        with open(filename, 'rb') as audio_file:
            from telegram import InputFile
            audio_input = InputFile(audio_file, filename=os.path.basename(filename))
            if thumb_path and os.path.exists(thumb_path):
                with open(thumb_path, 'rb') as thumb_file:
                    thumb_input = InputFile(thumb_file, filename=os.path.basename(thumb_path))
                    await msg_obj.reply_audio(
                        audio=audio_input,
                        title=title,
                        performer=uploader,
                        duration=duration if duration else 0,
                        caption="@music_for_weyymss_bot",
                        api_kwargs={"thumb": thumb_input}
                    )
            else:
                await msg_obj.reply_audio(
                    audio=audio_input,
                    title=title,
                    performer=uploader,
                    duration=duration if duration else 0
                )
        logging.info(f"‚úÖ –ü—ñ—Å–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {filename}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É: {e}")
        await msg_obj.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø—ñ—Å–Ω—ñ.")
