import nest_asyncio
nest_asyncio.apply()

import asyncio
import logging
from telegram.ext import Application
from handlers.commands import start_command_handler
from handlers.messages import text_message_handler, buttons_handler, search_music_handler
from handlers.voice import voice_message_handler
from telegram.ext import CommandHandler, MessageHandler, filters
from handlers.commands import start_command_handler  # –∑ —Ç–≤–æ–≥–æ commands.py
from handlers.messages import buttons_handler
from handlers.voice import voice_message_handler  # —è–∫—â–æ —î voice

from config import TOKEN  # API-–∫–ª—é—á –º–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª config.py

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

buttons_handler = MessageHandler(
    ( ( (   # –§—ñ–ª—å—Ç—Ä –¥–ª—è —Ç–æ—á–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤ –∫–Ω–æ–ø–æ–∫
      (filters.TEXT & filters.Regex("^(üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ—Å–Ω—é|üîç –ü–æ—à—É–∫ –≤—ñ–¥–µ–æ –∫–ª—ñ–ø—É|üé∂ –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø—ñ—Å–Ω—é|üìÉ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ|üéß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó)$"))
      ) )),
    buttons_handler
)

text_message_handler = MessageHandler(
    filters.TEXT & ~filters.COMMAND,
    text_message_handler
)



async def main():
    app = Application.builder().token(TOKEN).build()



    app.add_handler(start_command_handler)
    app.add_handler(buttons_handler)
    app.add_handler(text_message_handler)
    app.add_handler(search_music_handler)
    app.add_handler(voice_message_handler)




    print("üéµ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    await app.run_polling(close_loop=False)

if __name__ == "__main__":
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    loop.create_task(main())
    loop.run_forever()
