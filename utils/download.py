# utils/download.py

import os
import requests
import yt_dlp
import logging
from PIL import Image
from utils.sanitize import sanitize_filename, format_duration, format_filesize

def fetch_youtube_metadata(query):
    """
    –û—Ç—Ä–∏–º—É—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–µ–∫ (–±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è):
      - title (–Ω–∞–∑–≤–∞)
      - duration (—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, —Å–µ–∫)
      - uploader (–∫–∞–Ω–∞–ª/–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å)
      - thumbnail (URL –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏)
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ü–∏–º–∏ –ø–æ–ª—è–º–∏.
    """
    logging.info(f"üîé –û—Ç—Ä–∏–º—É—é –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è: {query}")
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'music/%(title)s.%(ext)s',
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(f"ytsearch:{query}", download=False)
        if 'entries' in info:
            info = info['entries'][0]
        meta = {
            'title': info.get('title', 'Unknown'),
            'duration': info.get('duration', 0),
            'uploader': info.get('uploader', 'Unknown'),
            'thumbnail': info.get('thumbnail', None),
        }
    return meta

def download_music(query):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞—É–¥—ñ–æ (–ø–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç) –∑–∞ –∑–∞–ø–∏—Ç–æ–º.
    –ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ .mp3-—Ñ–∞–π–ª—É –∞–±–æ None, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    logging.info(f"üéµ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –º—É–∑–∏–∫—É: {query}")
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'music/%(title)s.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(f"ytsearch:{query}", download=True)
        if 'entries' in info:
            info = info['entries'][0]
        filename = ydl.prepare_filename(info)
        filename = filename.replace('.webm', '.mp3').replace('.m4a', '.mp3')
        if os.path.exists(filename):
            logging.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–∞–π–ª: {filename}")
            return filename
        else:
            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {filename}")
            return None

def download_music_with_metadata(query):
    """
    –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î –º–µ—Ç–∞–¥–∞–Ω—ñ (title, duration, uploader, thumbnail),
    –ø–æ—Ç—ñ–º –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞—É–¥—ñ–æ, –ø–æ–≤–µ—Ä—Ç–∞—î:
      (filename, title, duration, uploader, thumbnail)
    """
    meta = fetch_youtube_metadata(query)
    title = meta['title']
    duration = meta['duration']
    uploader = meta['uploader']
    thumbnail = meta['thumbnail']
    filename = download_music(query)
    return filename, title, duration, uploader, thumbnail

def download_thumbnail(url, out_path='thumb.jpg', max_size_kb=200):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î thumbnail –∑–∞ URL —ñ –∑–º–µ–Ω—à—É—î –π–æ–≥–æ, –ø–æ–∫–∏ –Ω–µ —Å—Ç–∞–Ω–µ <200 KB.
    –ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–±–æ None, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏.
    """
    if not url:
        return None
    try:
        r = requests.get(url, timeout=10)
        if r.status_code != 200:
            logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ thumbnail: —Å—Ç–∞—Ç—É—Å {r.status_code}")
            return None
        with open(out_path, 'wb') as f:
            f.write(r.content)
        if os.path.getsize(out_path) > max_size_kb * 1024:
            img = Image.open(out_path)
            img.thumbnail((320, 320))
            img.save(out_path, optimize=True, quality=85)
            while os.path.getsize(out_path) > max_size_kb * 1024:
                img = Image.open(out_path)
                img.save(out_path, optimize=True, quality=70)
        return out_path
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è thumbnail: {e}")
        return None

def recognize_song(file_path):
    """
    –†–æ–∑–ø—ñ–∑–Ω–∞—î –ø—ñ—Å–Ω—é —á–µ—Ä–µ–∑ Audd.io.
    –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É —Ç—Ä–µ–∫—É –∞–±–æ '–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç—Ä–µ–∫'.
    """
    url = "https://api.audd.io/"
    data = {"api_token": "b158e7438fe38dde1f0990e3fd6bfd29"}
    try:
        with open(file_path, "rb") as f:
            files = {"file": f}
            response = requests.post(url, data=data, files=files).json()
        if "result" in response and response["result"]:
            return response["result"].get("title", "–ù–µ–≤—ñ–¥–æ–º–æ")
        else:
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç—Ä–µ–∫"
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫—É: {e}")
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç—Ä–µ–∫"